/** @file argparse.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef ARGPARSE_H
#define ARGPARSE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "sySim"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "sySim"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info {
    const char *help_help;    /**< @brief Print help and exit help description.  */
    const char *version_help; /**< @brief Print version and exit help description.  */
    int messages_arg;         /**< @brief Number of messages to send (default='10').  */
    char *messages_orig;      /**< @brief Number of messages to send original value given at command
                                 line.  */
    const char *messages_help; /**< @brief Number of messages to send help description.  */
    float loss_arg;            /**< @brief Packet loss probability (default='0.0').  */
    char *loss_orig; /**< @brief Packet loss probability original value given at command line.  */
    const char *loss_help; /**< @brief Packet loss probability help description.  */
    float corruption_arg;  /**< @brief Packet corruption probability (default='0.0').  */
    char *corruption_orig; /**< @brief Packet corruption probability original value given at command
                              line.  */
    const char *corruption_help; /**< @brief Packet corruption probability help description.  */
    float delay_arg;             /**< @brief Average delay between packets (default='0.0').  */
    char *delay_orig; /**< @brief Average delay between packets original value given at command
                         line.  */
    const char *delay_help; /**< @brief Average delay between packets help description.  */
    int seed_arg;           /**< @brief Seed for the random number generator (default='42').  */
    char *seed_orig;        /**< @brief Seed for the random number generator original value given at
                               command line.  */
    const char *seed_help;  /**< @brief Seed for the random number generator help description.  */
    int loglevel_arg;       /**< @brief Logging level (default='2').  */
    char *loglevel_orig;    /**< @brief Logging level original value given at command line.  */
    const char *loglevel_help; /**< @brief Logging level help description.  */
    char *logfile_arg;  /**< @brief If set, the logging will also be written to this file.  */
    char *logfile_orig; /**< @brief If set, the logging will also be written to this file original
                           value given at command line.  */
    const char *logfile_help; /**< @brief If set, the logging will also be written to this file help
                                 description.  */
    int quiet_flag; /**< @brief If set, the program won't print anything to stdout (default=off). */
    const char *quiet_help; /**< @brief If set, the program won't print anything to stdout help
                               description.  */

    unsigned int help_given;       /**< @brief Whether help was given.  */
    unsigned int version_given;    /**< @brief Whether version was given.  */
    unsigned int messages_given;   /**< @brief Whether messages was given.  */
    unsigned int loss_given;       /**< @brief Whether loss was given.  */
    unsigned int corruption_given; /**< @brief Whether corruption was given.  */
    unsigned int delay_given;      /**< @brief Whether delay was given.  */
    unsigned int seed_given;       /**< @brief Whether seed was given.  */
    unsigned int loglevel_given;   /**< @brief Whether loglevel was given.  */
    unsigned int logfile_given;    /**< @brief Whether logfile was given.  */
    unsigned int quiet_given;      /**< @brief Whether quiet was given.  */
};

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params {
    int override;   /**< @brief whether to override possibly already present options (default 0) */
    int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info
                       (default 1) */
    int check_required;  /**< @brief whether to check that all required options were provided
                            (default 1) */
    int check_ambiguity; /**< @brief whether to check for options already specified in the option
                            structure gengetopt_args_info (default 0) */
    int print_errors; /**< @brief whether getopt_long should print an error message for a bad option
                         (default 1) */
};

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser(int argc, char **argv, struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2(int argc, char **argv, struct gengetopt_args_info *args_info, int override,
                    int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext(int argc, char **argv, struct gengetopt_args_info *args_info,
                       struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init(struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free(struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required(struct gengetopt_args_info *args_info, const char *prog_name);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* ARGPARSE_H */
